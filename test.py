import numpy as np
import cv2 as cv2
import glob


# Load previously saved data
with np.load('CameraParams.npz') as file:
    mtx, dist, rvecs, tvecs = [file[i] for i in ('cameraMatrix','dist','rvecs','tvecs')]

# Annahme über die Schachbrettgröße in Millimetern
square_size = 25.0  # Beispiel: Standard-Schachbrett hat 25 mm Felder

chessboard_dict = {'a1': {'corner_a': (207.99931, 169.40065), 'corner_b': (245.73703, 169.18), 'corner_c': (241.84544, 198.08734), 'corner_d': (201.86308, 198.26434)}, 'a2': {'corner_a': (245.73703, 169.18), 'corner_b': (286.03387, 168.94498), 'corner_c': (283.8055, 197.90277), 'corner_d': (241.84544, 198.08734)}, 'a3': {'corner_a': (286.03387, 168.94498), 'corner_b': (324.33524, 168.72179), 'corner_c': (324.1664, 197.72575), 'corner_d': (283.8055, 197.90277)}, 'a4': {'corner_a': (324.33524, 168.72179), 'corner_b': (364.72507, 168.48686), 'corner_c': (366.4174, 197.54126), 'corner_d': (324.1664, 197.72575)}, 'a5': {'corner_a': (364.72507, 168.48686), 'corner_b': (403.89206, 168.2594), 'corner_c': (407.6376, 197.362), 'corner_d': (366.4174, 197.54126)}, 'a6': {'corner_a': (403.89206, 168.2594), 'corner_b': (443.587, 168.02922), 'corner_c': (449.25452, 197.18173), 'corner_d': (407.6376, 197.362)}, 'a7': {'corner_a': (443.587, 168.02922), 'corner_b': (485.35855, 167.7873), 'corner_c': (492.82175, 196.9937), 'corner_d': (449.25452, 197.18173)}, 'a8': {'corner_a': (485.35855, 167.7873), 'corner_b': (526.1763, 167.5513), 'corner_c': (535.4959, 196.81029), 'corner_d': (492.82175, 196.9937)}, 'b1': {'corner_a': (201.86308, 198.26434), 'corner_b': (241.84544, 198.08734), 'corner_c': (238.04088, 226.34782), 'corner_d': (195.93149, 226.16493)}, 'b2': {'corner_a': (241.84544, 198.08734), 'corner_b': (283.8055, 197.90277), 'corner_c': (281.602, 226.53745), 'corner_d': (238.04088, 226.34782)}, 'b3': {'corner_a': (283.8055, 197.90277), 'corner_b': (324.1664, 197.72575), 'corner_c': (323.99756, 226.72229), 'corner_d': (281.602, 226.53745)}, 'b4': {'corner_a': (324.1664, 197.72575), 'corner_b': (366.4174, 197.54126), 'corner_c': (368.12827, 226.91502), 'corner_d': (323.99756, 226.72229)}, 'b5': {'corner_a': (366.4174, 197.54126), 'corner_b': (407.6376, 197.362), 'corner_c': (411.46558, 227.10463), 'corner_d': (368.12827, 226.91502)}, 'b6': {'corner_a': (407.6376, 197.362), 'corner_b': (449.25452, 197.18173), 'corner_c': (455.10883, 227.29593), 'corner_d': (411.46558, 227.10463)}, 'b7': {'corner_a': (449.25452, 197.18173), 'corner_b': (492.82175, 196.9937), 'corner_c': (500.616, 227.49565), 'corner_d': (455.10883, 227.29593)}, 'b8': {'corner_a': (492.82175, 196.9937), 'corner_b': (535.4959, 196.81029), 'corner_c': (545.33246, 227.69228), 'corner_d': (500.616, 227.49565)}, 'c1': {'corner_a': (195.93149, 226.16493), 'corner_b': (238.04088, 226.34782), 'corner_c': (233.5431, 259.75845), 'corner_d': (188.78934, 259.76117)}, 'c2': {'corner_a': (238.04088, 226.34782), 'corner_b': (281.602, 226.53745), 'corner_c': (279.0457, 259.7569), 'corner_d': (233.5431, 259.75845)}, 'c3': {'corner_a': (281.602, 226.53745), 'corner_b': (323.99756, 226.72229), 'corner_c': (323.80545, 259.75586), 'corner_d': (279.0457, 259.7569)}, 'c4': {'corner_a': (323.99756, 226.72229), 'corner_b': (368.12827, 226.91502), 'corner_c': (370.04117, 259.75565), 'corner_d': (323.80545, 259.75586)}, 'c5': {'corner_a': (368.12827, 226.91502), 'corner_b': (411.46558, 227.10463), 'corner_c': (415.6679, 259.7561), 'corner_d': (370.04117, 259.75565)}, 'c6': {'corner_a': (411.46558, 227.10463), 'corner_b': (455.10883, 227.29593), 'corner_c': (461.41983, 259.7574), 'corner_d': (415.6679, 259.7561)}, 'c7': {'corner_a': (455.10883, 227.29593), 'corner_b': (500.616, 227.49565), 'corner_c': (508.86053, 259.75937), 'corner_d': (461.41983, 259.7574)}, 'c8': {'corner_a': (500.616, 227.49565), 'corner_b': (545.33246, 227.69228), 'corner_c': (555.54755, 259.76202), 'corner_d': (508.86053, 259.75937)}, 'd1': {'corner_a': (188.78934, 259.76117), 'corner_b': (233.5431, 259.75845), 'corner_c': (228.90053, 294.2444), 'corner_d': (181.45761, 294.24875)}, 'd2': {'corner_a': (233.5431, 259.75845), 'corner_b': (279.0457, 259.7569), 'corner_c': (276.392, 294.24182), 'corner_d': (228.90053, 294.2444)}, 'd3': {'corner_a': (279.0457, 259.7569), 'corner_b': (323.80545, 259.75586), 'corner_c': (323.6048, 294.24), 'corner_d': (276.392, 294.24182)}, 'd4': {'corner_a': (323.80545, 259.75586), 'corner_b': (370.04117, 259.75565), 'corner_c': (372.04974, 294.2394), 'corner_d': (323.6048, 294.24)}, 'd5': {'corner_a': (370.04117, 259.75565), 'corner_b': (415.6679, 259.7561), 'corner_c': (420.10617, 294.2399), 'corner_d': (372.04974, 294.2394)}, 'd6': {'corner_a': (415.6679, 259.7561), 'corner_b': (461.41983, 259.7574), 'corner_c': (468.12393, 294.2415), 'corner_d': (420.10617, 294.2399)}, 'd7': {'corner_a': (461.41983, 259.7574), 'corner_b': (508.86053, 259.75937), 'corner_c': (517.6727, 294.24423), 'corner_d': (468.12393, 294.2415)}, 'd8': {'corner_a': (508.86053, 259.75937), 'corner_b': (555.54755, 259.76202), 'corner_c': (566.5321, 294.248), 'corner_d': (517.6727, 294.24423)}, 'e1': {'corner_a': (181.45761, 294.24875), 'corner_b': (228.90053, 294.2444), 'corner_c': (223.52776, 334.1545), 'corner_d': (172.97318, 334.1585)}, 'e2': {'corner_a': (228.90053, 294.2444), 'corner_b': (276.392, 294.24182), 'corner_c': (273.32086, 334.15216), 'corner_d': (223.52776, 334.1545)}, 'e3': {'corner_a': (276.392, 294.24182), 'corner_b': (323.6048, 294.24), 'corner_c': (323.3726, 334.1505), 'corner_d': (273.32086, 334.15216)}, 'e4': {'corner_a': (323.6048, 294.24), 'corner_b': (372.04974, 294.2394), 'corner_c': (374.3745, 334.15005), 'corner_d': (323.3726, 334.1505)}, 'e5': {'corner_a': (372.04974, 294.2394), 'corner_b': (420.10617, 294.2399), 'corner_c': (425.24277, 334.15054), 'corner_d': (374.3745, 334.15005)}, 'e6': {'corner_a': (420.10617, 294.2399), 'corner_b': (468.12393, 294.2415), 'corner_c': (475.88293, 334.1521), 'corner_d': (425.24277, 334.15054)}, 'e7': {'corner_a': (468.12393, 294.2415), 'corner_b': (517.6727, 294.24423), 'corner_c': (527.87115, 334.1546), 'corner_d': (475.88293, 334.1521)}, 'e8': {'corner_a': (517.6727, 294.24423), 'corner_b': (566.5321, 294.248), 'corner_c': (579.24445, 334.1581), 'corner_d': (527.87115, 334.1546)}, 'f1': {'corner_a': (172.97318, 334.1585), 'corner_b': (223.52776, 334.1545), 'corner_c': (217.67043, 377.6639), 'corner_d': (163.7728, 377.4361)}, 'f2': {'corner_a': (223.52776, 334.1545), 'corner_b': (273.32086, 334.15216), 'corner_c': (269.95532, 377.88785), 'corner_d': (217.67043, 377.6639)}, 'f3': {'corner_a': (273.32086, 334.15216), 'corner_b': (323.3726, 334.1505), 'corner_c': (323.11673, 378.11703), 'corner_d': (269.95532, 377.88785)}, 'f4': {'corner_a': (323.3726, 334.1505), 'corner_b': (374.3745, 334.15005), 'corner_c': (376.9491, 378.35132), 'corner_d': (323.11673, 378.11703)}, 'f5': {'corner_a': (374.3745, 334.15005), 'corner_b': (425.24277, 334.15054), 'corner_c': (430.96207, 378.58847), 'corner_d': (376.9491, 378.35132)}, 'f6': {'corner_a': (425.24277, 334.15054), 'corner_b': (475.88293, 334.1521), 'corner_c': (484.56805, 378.8259), 'corner_d': (430.96207, 378.58847)}, 'f7': {'corner_a': (475.88293, 334.1521), 'corner_b': (527.87115, 334.1546), 'corner_c': (539.3487, 379.0704), 'corner_d': (484.56805, 378.8259)}, 'f8': {'corner_a': (527.87115, 334.1546), 'corner_b': (579.24445, 334.1581), 'corner_c': (593.62787, 379.3146), 'corner_d': (539.3487, 379.0704)}, 'g1': {'corner_a': (163.7728, 377.4361), 'corner_b': (217.67043, 377.6639), 'corner_c': (211.12285, 426.30078), 'corner_d': (153.44821, 426.002)}, 'g2': {'corner_a': (217.67043, 377.6639), 'corner_b': (269.95532, 377.88785), 'corner_c': (266.20786, 426.58743), 'corner_d': (211.12285, 426.30078)}, 'g3': {'corner_a': (269.95532, 377.88785), 'corner_b': (323.11673, 378.11703), 'corner_c': (322.833, 426.8828), 'corner_d': (266.20786, 426.58743)}, 'g4': {'corner_a': (323.11673, 378.11703), 'corner_b': (376.9491, 378.35132), 'corner_c': (379.79333, 427.18103), 'corner_d': (322.833, 426.8828)}, 'g5': {'corner_a': (376.9491, 378.35132), 'corner_b': (430.96207, 378.58847), 'corner_c': (437.2549, 427.48276), 'corner_d': (379.79333, 427.18103)}, 'g6': {'corner_a': (430.96207, 378.58847), 'corner_b': (484.56805, 378.8259), 'corner_c': (494.08575, 427.78217), 'corner_d': (437.2549, 427.48276)}, 'g7': {'corner_a': (484.56805, 378.8259), 'corner_b': (539.3487, 379.0704), 'corner_c': (551.87427, 428.08743), 'corner_d': (494.08575, 427.78217)}, 'g8': {'corner_a': (539.3487, 379.0704), 'corner_b': (593.62787, 379.3146), 'corner_c': (609.2601, 428.3915), 'corner_d': (551.87427, 428.08743)}, 'h1': {'corner_a': (153.44821, 426.002), 'corner_b': (211.12285, 426.30078), 'corner_c': (203.19543, 485.18735), 'corner_d': (140.92992, 484.88666)}, 'h2': {'corner_a': (211.12285, 426.30078), 'corner_b': (266.20786, 426.58743), 'corner_c': (261.67648, 485.47372), 'corner_d': (203.19543, 485.18735)}, 'h3': {'corner_a': (266.20786, 426.58743), 'corner_b': (322.833, 426.8828), 'corner_c': (322.49036, 485.7739), 'corner_d': (261.67648, 485.47372)}, 'h4': {'corner_a': (322.833, 426.8828), 'corner_b': (379.79333, 427.18103), 'corner_c': (383.22388, 486.07672), 'corner_d': (322.49036, 485.7739)}, 'h5': {'corner_a': (379.79333, 427.18103), 'corner_b': (437.2549, 427.48276), 'corner_c': (444.83618, 486.3871), 'corner_d': (383.22388, 486.07672)}, 'h6': {'corner_a': (437.2549, 427.48276), 'corner_b': (494.08575, 427.78217), 'corner_c': (505.53928, 486.69583), 'corner_d': (444.83618, 486.3871)}, 'h7': {'corner_a': (494.08575, 427.78217), 'corner_b': (551.87427, 428.08743), 'corner_c': (566.9313, 487.0108), 'corner_d': (505.53928, 486.69583)}, 'h8': {'corner_a': (551.87427, 428.08743), 'corner_b': (609.2601, 428.3915), 'corner_c': (628.0325, 487.32715), 'corner_d': (566.9313, 487.0108)}}
# Annahme: Die Schachbretter sind im dictionary `chessboard_dict` gespeichert
# Extrahiere die Eckpunkte des Schachbretts
corner_a = chessboard_dict['a1']['corner_a']
corner_b = chessboard_dict['h1']['corner_b']
corner_c = chessboard_dict['h8']['corner_c']
corner_d = chessboard_dict['a8']['corner_d']

# Die Eckpunkte des Schachbretts
chessboard_corners = [corner_a, corner_b, corner_c, corner_d]
print('chessboard corners', chessboard_corners)
# Die Eckpunkte sind jetzt in der Reihenfolge A1, H1, H8, A8 gespeichert


# Erkannte 2D-Eckpunkte des Schachbretts
image_points = np.array([
    corner_a,
    corner_b,
    corner_c,
    corner_d,
    # Weitere Eckpunkte hier einfügen
], dtype=np.float32)
print('image points', image_points)

# Lege die 2D-Punkte in ein Koordinatensystem mit Ursprung in der oberen linken Ecke des Schachbretts
# und umgekehrter Reihenfolge (von links oben nach rechts oben, dann links unten)
object_points = np.zeros((8 * 8, 3), dtype=np.float32)
object_points[:, :2] = np.mgrid[0:8, 0:8].T.reshape(-1, 2) * square_size
print('object points', object_points)

# Verwende object_points und image_points, um die Transformation zu berechnen
# Hier wird angenommen, dass du bereits die Kameramatrix und Verzerrungskoeffizienten hast
retval, rvecs, tvecs = cv2.solvePnP(object_points, image_points, mtx, dist)

# Die geschätzten rvecs und tvecs enthalten die Rotation und Translation der Kamera
# Diese können verwendet werden, um die 3D-Position der Schachfiguren zu berechnen

data=[{"xmin":566.8043823242,"ymin":409.0962219238,"xmax":632.2437133789,"ymax":472.0449523926,"confidence":0.9332429767,"class":5,"name":"Black-rook"},{"xmin":539.6846923828,"ymin":303.7201843262,"xmax":590.9473876953,"ymax":367.679901123,"confidence":0.927167654,"class":0,"name":"Black-bishop"},{"xmin":502.2088623047,"ymin":373.4278869629,"xmax":543.53125,"ymax":422.0223693848,"confidence":0.9241325259,"class":3,"name":"Black-pawn"},{"xmin":477.5339355469,"ymin":241.3929290771,"xmax":509.4901123047,"ymax":287.6209106445,"confidence":0.9228833318,"class":3,"name":"Black-pawn"},{"xmin":507.5724487305,"ymin":422.2481689453,"xmax":553.077331543,"ymax":472.5742797852,"confidence":0.922791481,"class":3,"name":"Black-pawn"},{"xmin":526.9172973633,"ymin":243.3988037109,"xmax":590.8029174805,"ymax":329.3112182617,"confidence":0.9226703644,"class":1,"name":"Black-king"},{"xmin":491.0516662598,"ymin":322.718536377,"xmax":529.158996582,"ymax":370.9422912598,"confidence":0.9224885702,"class":3,"name":"Black-pawn"},{"xmin":157.4464416504,"ymin":359.6731567383,"xmax":205.2668151855,"ymax":419.9301757812,"confidence":0.9210617542,"class":8,"name":"White-knight"},{"xmin":456.2874145508,"ymin":145.9213409424,"xmax":484.0520019531,"ymax":190.3441619873,"confidence":0.9184216857,"class":3,"name":"Black-pawn"},{"xmin":167.4043273926,"ymin":309.0023803711,"xmax":208.4779968262,"ymax":366.5130615234,"confidence":0.9167684913,"class":6,"name":"White-bishop"},{"xmin":148.5970001221,"ymin":408.4321289062,"xmax":196.6472015381,"ymax":470.0131835938,"confidence":0.9165857434,"class":11,"name":"White-rook"},{"xmin":512.7585449219,"ymin":191.0859680176,"xmax":553.8012695312,"ymax":254.0838317871,"confidence":0.9160559773,"class":0,"name":"Black-bishop"},{"xmin":181.3014984131,"ymin":212.2270050049,"xmax":226.337387085,"ymax":291.8619384766,"confidence":0.9155218601,"class":10,"name":"White-queen"},{"xmin":465.8653564453,"ymin":205.9059753418,"xmax":497.2572021484,"ymax":252.1432495117,"confidence":0.9148876667,"class":3,"name":"Black-pawn"},{"xmin":503.1650695801,"ymin":163.9706115723,"xmax":547.1390380859,"ymax":222.3228759766,"confidence":0.9143577218,"class":2,"name":"Black-knight"},{"xmin":482.8340454102,"ymin":279.549407959,"xmax":518.1950683594,"ymax":326.761138916,"confidence":0.9085156322,"class":3,"name":"Black-pawn"},{"xmin":460.6585388184,"ymin":174.0429534912,"xmax":489.1382751465,"ymax":218.2353668213,"confidence":0.9033405781,"class":3,"name":"Black-pawn"},{"xmin":547.1771850586,"ymin":357.0704956055,"xmax":611.6348266602,"ymax":423.5960693359,"confidence":0.9030411243,"class":2,"name":"Black-knight"},{"xmin":516.7100219727,"ymin":209.9939727783,"xmax":574.0858764648,"ymax":292.3944702148,"confidence":0.9006583691,"class":4,"name":"Black-queen"},{"xmin":218.6843109131,"ymin":369.7947998047,"xmax":255.4701080322,"ymax":417.1860351562,"confidence":0.8993979692,"class":9,"name":"White-pawn"},{"xmin":494.916015625,"ymin":140.4322052002,"xmax":533.4035644531,"ymax":192.7620391846,"confidence":0.8993084431,"class":5,"name":"Black-rook"},{"xmin":227.7386322021,"ymin":322.8572692871,"xmax":262.3681030273,"ymax":370.2508239746,"confidence":0.8981114626,"class":9,"name":"White-pawn"},{"xmin":167.4933319092,"ymin":246.4772796631,"xmax":217.1829986572,"ymax":326.673614502,"confidence":0.8921825886,"class":7,"name":"White-king"},{"xmin":252.1626281738,"ymin":148.5211029053,"xmax":278.0922546387,"ymax":191.8835296631,"confidence":0.8826338053,"class":9,"name":"White-pawn"},{"xmin":197.8398895264,"ymin":195.4085845947,"xmax":228.2589874268,"ymax":250.4856719971,"confidence":0.8811032176,"class":6,"name":"White-bishop"},{"xmin":234.6822967529,"ymin":276.0479431152,"xmax":265.9106445312,"ymax":320.6949768066,"confidence":0.8807866573,"class":9,"name":"White-pawn"},{"xmin":214.1300811768,"ymin":422.0994262695,"xmax":253.8371429443,"ymax":472.0346679688,"confidence":0.8801220655,"class":9,"name":"White-pawn"},{"xmin":236.3515319824,"ymin":240.7790985107,"xmax":265.6219177246,"ymax":284.7653808594,"confidence":0.8729754686,"class":9,"name":"White-pawn"},{"xmin":208.4053192139,"ymin":141.9446716309,"xmax":239.7298736572,"ymax":192.8491210938,"confidence":0.8721605539,"class":11,"name":"White-rook"},{"xmin":241.3112792969,"ymin":210.8179321289,"xmax":268.8025817871,"ymax":252.2206115723,"confidence":0.870721519,"class":9,"name":"White-pawn"},{"xmin":247.778213501,"ymin":178.1534729004,"xmax":275.7807922363,"ymax":222.1690368652,"confidence":0.8645592332,"class":9,"name":"White-pawn"},{"xmin":201.7040405273,"ymin":164.9483032227,"xmax":236.5560302734,"ymax":219.8232727051,"confidence":0.8282431364,"class":8,"name":"White-knight"},{"xmin":498.0408630371,"ymin":322.7518310547,"xmax":536.352722168,"ymax":420.7104492188,"confidence":0.3504125774,"class":3,"name":"Black-pawn"},{"xmin":513.5728149414,"ymin":192.1202087402,"xmax":554.1089477539,"ymax":253.7149963379,"confidence":0.2888135612,"class":4,"name":"Black-queen"},{"xmin":201.7120819092,"ymin":167.1377105713,"xmax":235.7307891846,"ymax":222.0245513916,"confidence":0.2786346376,"class":6,"name":"White-bishop"},{"xmin":555.8996582031,"ymin":359.3535766602,"xmax":618.2210693359,"ymax":468.8807373047,"confidence":0.2552410364,"class":5,"name":"Black-rook"}]
# Berechne die Mittelpunkte der Bounding Boxes
midpoints = []
for item in data:
    xmin, ymin, xmax, ymax = item["xmin"], item["ymin"], item["xmax"], item["ymax"]
    midpoint = ((xmin + xmax) / 2, (ymin + ymax) / 2)
    midpoints.append(midpoint)

# Initialize an empty array to store the 2D points of detected figures
image_points_figures = np.empty((0, 2), dtype=np.float32)

# Iterate over the 'data' list and extract 2D points for each detected figure
for item in data:
    xmin, ymin, xmax, ymax = item["xmin"], item["ymin"], item["xmax"], item["ymax"]
    midpoint = ((xmin + xmax) / 2, (ymin + ymax) / 2)
    image_points_figures = np.vstack((image_points_figures, midpoint))

print('midpoints', midpoints)
print('image points figures', image_points_figures)

# Verwende die rvecs und tvecs, um die 3D-Positionen der Schachfiguren zu berechnen
rvec = rvecs[0]
tvec = tvecs[0]
rotation_matrix, _ = cv2.Rodrigues(rvec)

# Konvertiere die 2D-Punkte der Schachfiguren in 3D-Punkte im Schachbrett-Koordinatensystem
figure_positions = []
for image_point in image_points_figures:
    homogenous_point = np.array([image_point[0], image_point[1], 1.0])
    inv_rotation_matrix = np.linalg.inv(rotation_matrix)
    inv_translation_vector = -tvec
    figure_3d = np.dot(inv_rotation_matrix, homogenous_point - inv_translation_vector)
    figure_positions.append(figure_3d * square_size)

# Die figure_positions-Liste enthält die 3D-Positionen der erkannten Schachfiguren
for i, position in enumerate(figure_positions):
    print(f"Schachfigur {i + 1} - 3D-Position (X, Y, Z): {position}")